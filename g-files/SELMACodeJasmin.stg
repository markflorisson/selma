//SELMA string template

group SELMA;

program(instructions, source_file, stack_limit, locals_limit, pop) ::= <<
.source <source_file>
.class public Main
.super java/lang/Object
.field public static scanner_field Ljava/util/Scanner;

.method public \<init\>()V
    aload_0
    invokespecial java/lang/Object/\<init\>()V
    return
.end method

.method public static main([Ljava/lang/String;)V
.limit stack <stack_limit>
.limit locals <locals_limit>
    new java/util/Scanner
    dup                                       ; dup for \<init\>
    getstatic java/lang/System/in Ljava/io/InputStream;
    invokespecial java/util/Scanner/\<init\>(Ljava/io/InputStream;)V
    putstatic Main/scanner_field Ljava/util/Scanner;

<instructions>
    return
.end method
>>

compound(instructions, line, pop) ::= <<
.line <line>
<instructions; separator="\n">
<if (pop)>
    removeLastInstruction  ; line <line>
<endif>
>>

expr(expr) ::= <<
    <expr>
>>

exprStat(e1, pop, line) ::= <<
.line <line>
<e1>
<if (pop)>
    pop
<endif>
>>

//Calculations
uExpr(e1, instr, line, op) ::= <<
.line <line>                    ; <op> <e1>
<e1>
    <instr>
>>

not(e1, label_num1, label_num2, line) ::= <<
.line <line>
    <e1>
	ifeq L<label_num1>
	iconst_0
	goto L<label_num2>
L<label_num1>:
	iconst_1
L<label_num2>:
>>

biExpr(e1, e2, instr, line, op) ::= <<
.line <line>
<e1>
<e2>
    <instr>
>>

biExprJump(e1, e2, instr, label_num1, label_num2, line, op) ::= <<
.line <line>
<e1>
<e2>
    <instr> L<label_num1>        ; e1 <op> e2
    iconst_0
    goto L<label_num2>
L<label_num1>:
    iconst_1
L<label_num2>:
>>

//Declare
declareConst(id, val, type, addr) ::= <<
    ldc <val>                    ; const <id> : <type>
    istore <addr>
>>

declareVar(id, type, addr)::=<<

>>

//Load

loadNum(val, iconst, bipush) ::= <<
<if (iconst)>
    iconst_<val>
<elseif (bipush)>
    bipush <val>

<else>
    ldc <val>
<endif>
>>

loadVal(id, addr, val, is_const) ::= <<
<if (is_const)>
    ldc <val>                   ; load constant <id>
<else>
    iload <addr>                ; load <id> from <addr>
<endif>
>>

loadChar(val, char, line) ::= <<
.line <line>
    bipush <val>                ; ldc <char>
>>

//Assign
assign(id, type, addr, e1, isint) ::= <<
<e1>                            ; e1 right hand for assignment
    dup
    istore <addr>               ; store e1 in <id>

>>

read(addrs, dup_top, is_bool, is_int, line) ::= <<
.line <line>
<addrs, is_bool, is_int : { a, b, i | <readSingle(addr=a,
                                                  is_bool=b,
                                                  is_int=i,
                                                  dup_top=dup_top) > }; separator="\n">

>>

readSingle(addr, is_bool, is_int, dup_top) ::= <<
    getstatic Main/scanner_field Ljava/util/Scanner;
<if (is_bool)>
    invokevirtual java/util/Scanner/nextBoolean()Z

<elseif (is_int)>
    invokevirtual java/util/Scanner/nextInt()I

<else>
    invokevirtual java/util/Scanner/nextByte()I

<endif>

<if (dup_top)>
    dup

<endif>


    istore <addr>
>>

print(exprs, type_denoters, dup_top, expr_is_bool, label_nums1, label_nums2, line) ::= <<
.line <line>
<exprs, type_denoters, expr_is_bool,
 label_nums1, label_nums2 : { e, t, b, L1, L2 | < printSingle(expr=e,
                                                              type_denoter=t,
                                                              dup_top=dup_top,
                                                              is_bool=b,
                                                              label_num1=L1,
                                                              label_num2=L2) > }>
>>


printSingle(expr, type_denoter, dup_top, is_bool, label_num1, label_num2) ::= <<
<expr>
<if (dup_top)>
    dup
<endif>

<if (is_bool)>
    ifeq L<label_num1>
    ldc "true"
    goto L<label_num2>
L<label_num1>:
    ldc "false"
L<label_num2>:
<endif>

    getstatic java/lang/System/out Ljava/io/PrintStream;
    swap
    invokevirtual java/io/PrintStream/println(<type_denoter>)V

>>

//conditionals
if (ec1, ec2, ec3, label_num1, label_num2, ec3_not_empty, pop1, pop2) ::= <<
<ec1>							; e1 condition
    ifeq L<label_num1>          ; e1 is false
<ec2>                           ; e2 if true expression
<if (pop1)>
    pop

<endif>
<if (ec3_not_empty)>
    goto L<label_num2>
<endif>

L<label_num1>:
<if (ec3_not_empty)>
<ec3>							; e3 if false expression
<if (pop2)>
    pop                         ; pop

<endif>
L<label_num2>:
<endif>
>>

while(ec1, ec2, label_num1, label_num2)::=<<
L<label_num1>:
<ec1>							; e1 while condition
    ifeq L<label_num2>
<ec2>							; e2 expression to evaluate (body)
<if (pop)>
    pop

<endif>
    goto L<label_num1>
L<label_num2>:
>>
