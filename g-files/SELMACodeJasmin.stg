//SELMA string template

group SELMA;

program(instructions, source_file, stack_limit, locals_limit) ::= <<
.source <source_file>
.class  public MyClass
.super  java/lang/Object
.method public static main([Ljava/lang/String;)V
.limit stack <stack_limit>
.limit locals <locals_limit>
<instructions>
									; end of program
>>

compound(instructions) ::= <<
									; start compound
    <instructions; separator="\n">
									; end compound
>>

popStack() ::= <<
    pop
>>

//Calculations
Expr(e1,op)::=<<
    <e1>							; e1 for operation <op>
    CALL <op>						; single operation <op>
>>

biExpr(e1,e2,instr)::=<<
    <e1>							; e1 for operation <instr>
    <e2>							; e2 for operation <instr>
    <instr>
>>

biExprJump(e1, e2, instr)::=<<
    <e1>
    <e2>
    <instr> L1
    iconst_0
L1:
    iconst_1
>>

//Declare
declareConst(id,val,type,addr)::=<<
									; declare var <id>: <type> = <val> @ <addr>[SB]
    ldc <val>                       ; declare var
>>

declareVar(id,type,addr)::=<<
									; declare var <id>: <type> @ <addr>[SB]
    PUSH 1
>>

//Load

loadNum(val, num)::=<<
    <if (iconst)>
        iconst_<val>
    <elseif (bipush)>
        bipush <val>
    <else>
        ldc <val>
    <endif>
>>

loadVal(id,addr)::=<<
									; loadVal <id> from <addr>[SB]
    iload <addr>                    ; load integer from <addr>
>>

//Assign
assign(id, type, addr, e1, isint)::=<<
    <e1>                            ; e1 right hand for assignment
    dup
    istore <addr>                   ; assign e1 to <id>: <type> @ <addr>[SB]
>>

read(id, addr, dup_top) ::= <<
    read here                       ; reading <id>
<if (dup_top)>
    dup
<endif>
    istore <addr>
>>

//conditionals
if(ec1, ec2, ec3)::=<<
    <ec1>							; e1 condition
    iconst_0
    ifeq L1                         ; e1 is false
    <ec2>							; e2 if true expression
    goto L2
L1:
    <ec3>							; e3 if false expression
L2:
>>

while(ec1,ec2)::=<<
L1:
    <ec1>							; e1 while condition
    iconst_0
    ifeq L2
    <ec2>							; e2 expression to evaluate (body)
    goto L1
L2:
>>
