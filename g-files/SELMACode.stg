//SELMA string template

group SELMA;

program(instructions) ::= <<
; TAM assembler code generated by SELMACompiler
; comments at 50 whitespaces
									; start of program
<instructions>
HALT
									; end of program
>>

compound(instructions) ::= <<
									; start compound
<instructions; separator="\n">
									; end compound
>>


//Calculations
Expr(e1,op)::=<<
<e1>								; e1 for operation <op>
CALL <op>							; single operation <op>
>>

biExpr(e1,e2,op)::=<<
<e1>								; e1 for operation <op>
<e2>								; e2 for operation <op>
CALL <op>									; binary operation <op>
>>

//Declare
declareConst(id,val,type,addr)::=<<
									; declare var <id>: <type> = <val> @ <addr>[SB]
LOADL <val>
>>

declareVar(id,type,addr)::=<<
									; declare var <id>: <type> @ <addr>[SB]
PUSH 1
>>

//Load
loadNum(val)::=<<
									; loadNum <val>
LOADL <val>
>>

loadVal(id,addr)::=<<
									; loadVal <id> from <addr>[SB]
LOAD(1) <addr>[SB]
>>

//Assign
assign(id,type,addr,e1)::=<<
<e1>								; e1 right hand for assignment
STORE(1) <addr>[SB]					; assign e1 to <id>: <type> @ <addr>[SB]
>>

//conditionals
if(ec1,ec2,ec3)::=<<
<ec1>								; e1 condition
<ec2>								; e2 if true expression
<ec3>								; e3 if false expression
hier hoort een if
>>

while(ec1,ec2)::=<<
<ec1>								; e1 while condition
<ec2>								; e2 expression to evaluate
hier hoort een while
>>
