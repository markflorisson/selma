//SELMA string template

group SELMA;

program(instructions) ::= <<
; TAM assembler code generated by SELMACompiler
; comments at 50 whitespaces
                                                  ; start of program
<instructions>
HALT                                              ; end of program
>>

compound(instructions) ::= <<
                                                  ; start compound
<instructions; separator="\n">
                                                  ; end compound
>>


//Calculations
Expr(e1,op)::=<<
<e1>											; e1 for operation <op>
CALL <op>										; operation <op>
>>

biExpr(e1,e2,op)::=<<
<e1>											; e1 for operation <op>
<e2>											; e2 for operation <op>
CALL <op>										; operation <op>
>>

//Declare
declareConst(id,val,type,addr)::=<<
LOADL <val>                                       ; declare var <id>: <type> = <val> @ <addr>[SB]
>>

declareVar(id,type,addr)::=<<
PUSH 1                                            ; declare var <id>: <type> @ <addr>[SB]
>>

//Load
loadNum(val)::=<<
LOADL <val>                                       ; loadNum <val>
>>

loadVal(id,addr)::=<<
LOAD(1) <addr>[SB]                                ; loadVal <id> from <addr>[SB]
>>

//Assign
assign(id,type,addr,e1)::=<<
<e1>                                              ; e1 right hand for assignment
STORE(1) <addr>[SB]                               ; assign e1 to <id>: <type> @ <addr>[SB]
>>

//conditionals
if(ec1,ec2,ec3)::=<<
<ec1>                                           ; e1 right hand for assignment
<ec2>                                           ; e2 right hand for assignment
<ec3>                                           ; e3 right hand for assignment
hier hoort een if
>>

while(ec1,ec2)::=<<
//<ec1>                                           ; e1 right hand for assignment
//<ec2>                                           ; e2 right hand for assignment
//hier hoort een while
>>
